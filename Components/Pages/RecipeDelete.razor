@page "/RecipeDelete/{id:int}"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore;
@inject IDbContextFactory<ApplicationDbContext> dbContext

@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> userManager
@inject NavigationManager NavigationManager
@using RecipeVault.Components.Account
@using RecipeVault.Data;
@using RecipeVault.Models;


@attribute [Authorize(Roles = "User")]

<PageTitle>{recipe_name}</PageTitle>


@if(recipe != null  && isOwner) 
{
    <div class="container py-5">

        <h1>Delete Recipe</h1>

        <div class="main">

            <p class="disclaimer">Are you sure you want to delete the <br> <span>"@recipe.Name"</span> recipe?</p>

            <div class="description"> 
                <h2>Description</h2>
                <p>@recipe.Description</p>
            </div>

            <div class="category"> 
                <h2>Category</h2>
                <p>@recipe.Category.Name</p>
            </div>
            <div class="ingredients"> 
                <h2>Ingredients</h2>
                <!--Generate list of ingredients here-->
                <ul>

                @foreach (var ingredient in recipe.Ingredients)
                {
                    <li>@ingredient.Quantity - @ingredient.Units : @ingredient.Name</li>
                }
                </ul>
            </div>
            <div class="instructions">
                <h2>Instructions</h2>
                <!--Generate list of instructions here-->
                <p>
                    @recipe.Instructions
                </p>
            </div>
        </div>

        <div class="buttons-container">
            <button type="button" class="btn btn-danger" @onclick="delete" >Delete</button>
            <button type="button" class="btn btn-secondary" @onclick="cancel">Cancel</button>
        </div>
        
    </div>
}
 else 
{
    <DeleteError /> 
} 


@code {

    // Parameter to hold the recipe ID from the URL
    [Parameter]
    public int Id { get; set; }

    // Cascading parameter to get the current HttpContext
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    // Recipe object to hold the recipe details
    [SupplyParameterFromForm]
    private Recipe recipe { get; set; }

    // Boolean to check if the current user is the owner of the recipe
    private bool isOwner = false;

    // List to hold the categories
    private List<Category> Categories { get; set; } = new List<Category>();

    // Method to initialize the component
    protected override async Task OnInitializedAsync()
    {        
        using var context = dbContext.CreateDbContext();
        // Fetch all categories
        Categories = await context.Category.ToListAsync();
        // Fetch the recipe details including category and ingredients
        recipe = await context.Recipe
            .Include(r => r.Category)
            .Include(r => r.Ingredients) 
            .FirstOrDefaultAsync(r => r.Id == this.Id);

        // Log the recipe and category details
        Console.WriteLine("Recipe: " + recipe.Name);
        Console.WriteLine("Category: " + recipe.Category.Name);

        // Check if the current user is the owner of the recipe
        isOwner = await isRecipeOwner();  
    }

    // Method to handle the cancel button click
    private async void cancel()
    {
        // Navigate to the recipe view page
        NavigationManager.NavigateTo("/RecipeView/" + this.Id);
    }

    // Method to handle the delete button click
    private async void delete()
    {
        using var context = dbContext.CreateDbContext();
        // Remove the recipe from the database
        context.Recipe.Remove(recipe);
        await context.SaveChangesAsync();
        // Navigate to the recipes list page
        NavigationManager.NavigateTo("/Recipes");
    }

    // Method to check if the current user is the owner of the recipe
    private async Task<bool> isRecipeOwner()
    {
        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        // Log the recipe creator ID and the logged-in user ID
        Console.WriteLine("Recipe Creator ID: " + this.recipe.UserId);
        Console.WriteLine("Logged In User ID: " + userId);

        // Return true if the logged-in user is the owner of the recipe
        return userId == recipe.UserId;
    }
}