@page "/RecipeDelete/{id:int}"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore;
@inject IDbContextFactory<ApplicationDbContext> dbContext

@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> userManager
@inject NavigationManager NavigationManager
@using RecipeVault.Components.Account
@using RecipeVault.Data;
@using RecipeVault.Models;


@attribute [Authorize(Roles = "User")]

<PageTitle>{recipe_name}</PageTitle>


@if(recipe != null  && isOwner) 
{
    <div class="container py-5">

        <h1>Delete Recipe</h1>

        <div class="main">

            <p class="disclaimer">Are you sure you want to delete the <br> <span>"@recipe.Name"</span> recipe?</p>

            <div class="description"> 
                <h2>Description</h2>
                <p>@recipe.Description</p>
            </div>

            <div class="category"> 
                <h2>Category</h2>
                <p>@recipe.Category.Name</p>
            </div>
            <div class="ingredients"> 
                <h2>Ingredients</h2>
                <!--Generate list of ingredients here-->
                <ul>

                @foreach (var ingredient in recipe.Ingredients)
                {
                    <li>@ingredient.Quantity - @ingredient.Units : @ingredient.Name</li>
                }
                </ul>
            </div>
            <div class="instructions">
                <h2>Instructions</h2>
                <!--Generate list of instructions here-->
                <p>
                    @recipe.Instructions
                </p>
            </div>
        </div>

        <div class="buttons-container">
            <button type="button" class="btn btn-danger" @onclick="delete" >Delete</button>
            <button type="button" class="btn btn-secondary" @onclick="cancel">Cancel</button>
        </div>
        
    </div>
}
 else 
{
    <DeleteError /> 
} 



@code {


    [Parameter]
    public int Id { get; set; }


    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private Recipe recipe { get; set; }

    private bool isOwner = false;

    private List<Category> Categories { get; set; } = new List<Category>();



    protected override async Task OnInitializedAsync()
    {        
        using var context = dbContext.CreateDbContext();
        Categories = await context.Category.ToListAsync();
        recipe = await context.Recipe
            .Include(r => r.Category)

            .Include(r => r.Ingredients) 
            .FirstOrDefaultAsync(r => r.Id == this.Id);
        Console.WriteLine("Recipe: " + recipe.Name);
        Console.WriteLine("Category: " + recipe.Category.Name);

        isOwner = await isRecipeOwner();  
    }

     private async void cancel()
    {
        
        NavigationManager.NavigateTo("/RecipeView/"+this.Id);
    }

    private async void delete()
    {
        using var context = dbContext.CreateDbContext();
        context.Recipe.Remove(recipe);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/Recipes");
    }


    private  async Task<bool> isRecipeOwner()
    {
        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        // does the logged in user own the recipe?
        Console.WriteLine("Recipe Creator ID: " + this.recipe.UserId);
        Console.WriteLine("Logged In User ID: " + userId);
        return  userId == recipe.UserId;
    }

}