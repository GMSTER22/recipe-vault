 @page "/create-recipe"
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject IDbContextFactory<ApplicationDbContext> dbContext
@inject RecipeVault.Components.Account.IdentityUserAccessor UserAccessor
@using RecipeVault.Models
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.EntityFrameworkCore;
@using RecipeVault.Data;
@using RecipeVault.Models;

<h3>Create Recipe</h3>

<EditForm Model="@NewRecipe" method="post" OnValidSubmit="HandleValidSubmit" FormName="test-form">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="Name" class="form-label">Recipe Name</label>
        <InputText id="Name" class="form-control" @bind-Value="@NewRecipe.Name" />
    </div>

    <div class="mb-3">
        <label for="Description" class="form-label">Description</label>
        <InputTextArea id="Description" class="form-control" @bind-Value="@NewRecipe.Description" />
    </div>

    <div class="mb-3">
        <label for="category" class="form-label">Category</label>
        <InputSelect id="category" class="form-select" @bind-Value="@NewRecipe.CategoryId">
            @foreach (var category in Categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>
    </div>

    <div class="form-check mb-3">
        <InputCheckbox id="isPublic" class="form-check-input" @bind-Value="@NewRecipe.IsPublic" />
        <label class="form-check-label" for="isPublic">Is Public?</label>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private Recipe NewRecipe { get; set; } = new();


    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }
   

    private List<Category> Categories { get; set; } = new List<Category>();



    @* protected override async Task OnInitializedAsync()
    {        
        NewRecipe.IsPublic = true;
        using var context = dbContext.CreateDbContext();
        Categories = await context.Category.ToListAsync();

        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        NewRecipe.UserId = user.Id;
    } *@

    private async Task HandleValidSubmit()
    {

        System.Console.WriteLine("HandleValidSubmit");
        System.Console.WriteLine(NewRecipe.Name);
        System.Console.WriteLine(NewRecipe.Description);
        // Submit the recipe to the API
      
        // navigate to home

        NavigationManager.NavigateTo("/");

        @* using var context = dbContext.CreateDbContext();
        Category c = new Category();
        c.Name = "Test";
        var createdRecipe = context.Add(c);
        await context.SaveChangesAsync(); *@
    }
} 