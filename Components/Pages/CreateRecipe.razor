@page "/RecipeCreate"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore;
@inject IDbContextFactory<ApplicationDbContext> dbContext

@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> userManager
@inject NavigationManager NavigationManager
@using RecipeVault.Components.Account
@using RecipeVault.Data;
@using RecipeVault.Models;
<h3>Add Recipe</h3>

<EditForm Model="@recipe" OnValidSubmit="SaveCustomer">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="FirstName">Name:</label>
        <InputText id="FirstName" @bind-Value="recipe.Name" class="form-control" />
        <ValidationMessage For="@(() => recipe.Name)" />
    </div>

    <div class="form-group">
        <label for="LastName">Description:</label>
        <InputText id="LastName" @bind-Value="recipe.Description" class="form-control" />
        <ValidationMessage For="@(() => recipe.Description)" />
    </div>
     <div class="mb-3">
            <label for="category" class="form-label">Category</label>
            <InputSelect id="category" class="form-select" @bind-Value="recipe.CategoryId">
                @foreach (var category in Categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
        </div>
     <div class="form-check mb-3">
            <InputCheckbox id="isPublic" class="form-check-input" @bind-Value="recipe.IsPublic" />
            <label class="form-check-label" for="isPublic">Is Public?</label>
    </div>
    <div class="form-group">
        <label for="Instructions">Instructions:</label>
        <InputText id="Instructions" @bind-Value="recipe.Instructions" class="form-control" />
        <ValidationMessage For="@(() => recipe.Instructions)" />
    </div>
    <h4>Ingredients</h4>
    @foreach (var ingredient in recipe.Ingredients)
    {
         <button type="button" class="btn btn-danger" @onclick="() => RemoveIngredient(ingredient)">Remove Ingredient</button>
        <div class="form-group">
            <label for="Ingredient">Ingredient:</label>
            <InputText id="Ingredient" @bind-Value="ingredient.Name" class="form-control" />
            <ValidationMessage For="@(() => ingredient.Name)" />
        </div>
        <div class="form-group">
            <label for="Quantity">Quantity:</label>
            <InputText id="Quantity" @bind-Value="ingredient.Quantity" class="form-control" />
            <ValidationMessage For="@(() => ingredient.Quantity)" />
        </div>
        <div class="form-group">
            <label for="Units">Units:</label>
            <InputText id="Units" @bind-Value="ingredient.Units" class="form-control" />
            <ValidationMessage For="@(() => ingredient.Units)" />
        </div> 
    }
    <button type="button" class="btn btn-primary" @onclick="AddIngredients">Add Ingredients</button>



    <button type="button" class="btn btn-success" @onclick="save" >Save</button>
</EditForm>

@code {
    private Recipe recipe = new Recipe { Ingredients = new List<Ingredient>() };
    private List<Category> Categories { get; set; } = new List<Category>();


    protected override async Task OnInitializedAsync()
    {        
        using var context = dbContext.CreateDbContext();
        Categories = await context.Category.ToListAsync();
    }
    private void SaveCustomer()
    {
        // Save to where ever
        System.Console.WriteLine(recipe.Name);
        Console.WriteLine(recipe.Description);
        foreach (var ingredient in recipe.Ingredients)
        {
            System.Console.WriteLine(ingredient.Name);
            System.Console.WriteLine(ingredient.Quantity);
            System.Console.WriteLine(ingredient.Units);
        }
    }

    private void AddIngredients()
    {
        Console.WriteLine("Adding Ingredient");
        recipe.Ingredients = recipe.Ingredients ?? new List<Ingredient>();
        recipe.Ingredients.Add(new Ingredient());
        StateHasChanged();
    }

    private void RemoveIngredient(Ingredient Ingredient)
    {
        recipe.Ingredients.Remove(Ingredient);
        StateHasChanged();
    }

    private async void save()
    {
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
         using var context = dbContext.CreateDbContext();
        Recipe recipe = new Recipe();
        recipe.Name = this.recipe.Name;
        recipe.Description = this.recipe.Description;
        recipe.CategoryId = this.recipe.CategoryId;
        if(recipe.CategoryId == 0)
        {
            recipe.CategoryId = Categories[0].Id;
        }
        recipe.Instructions = this.recipe.Instructions;
        recipe.IsPublic = this.recipe.IsPublic;
        recipe.UserId = userId;
        recipe.Ingredients = new List<Ingredient>();
        foreach (var ingredient in this.recipe.Ingredients)
        {
            recipe.Ingredients.Add(new Ingredient { Name = ingredient.Name, Quantity = ingredient.Quantity, Units = ingredient.Units });
        }
        Console.WriteLine("Category ID: " + this.recipe.CategoryId);
      
        
        context.Recipe.Add(recipe);
        await context.SaveChangesAsync();
        // get the id of the new recipe
        Console.WriteLine("recipe ID: " + recipe.Id);
         NavigationManager.NavigateTo("/RecipeView/"+@recipe.Id);  
    }


} 