@page "/recipes/"
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject IDbContextFactory<ApplicationDbContext> dbContext
@inject RecipeVault.Components.Account.IdentityUserAccessor UserAccessor
@using Microsoft.AspNetCore.Identity
@inject NavigationManager Navigation
@using RecipeVault.Models
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.EntityFrameworkCore;
@using RecipeVault.Data;
@using RecipeVault.Models;


<PageTitle>Available Recipes</PageTitle>

<div class="container py-5">

    <h1>Recipes</h1>

    <div class="button-container">
        <button class="link-button" OnClick="location.href='/RecipeCreate/'" >Add New Recipe</button>
    </div>

    <div class="rows">

        @if (recipes != null && recipes.Any())
        {
            <div class="row row-heading">
                <span class="category">Category</span>
                <span class="name">Name</span>
                <span class="actions">Actions</span>
            </div>

            @foreach (var recipe in recipes)
            {
                <div class="row row-data">
                    <span class="category">@recipe.Category.Name</span>
                    <span class="name">@recipe.Name</span>
                    <div class="actions">
                        <button class="btn btn-primary" OnClick=" location.href='/RecipeView/@recipe.Id' " >View</button>
                        <button class="btn btn-secondary" OnClick=" location.href='/RecipeEdit/@recipe.Id' ">Edit</button>
                        <button class="btn btn-danger" OnClick=" location.href='/RecipeDelete/@recipe.Id' ">Delete</button>
                    </div>
                </div>
            }
        }
        else
        {
            <p>No recipes found.</p>
        }

    </div>

</div>
@code {

    // Cascading parameter to get the current HttpContext
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    // List to hold the recipes
    private List<Recipe> recipes { get; set; }

    // Method that runs when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        var user = await UserAccessor.GetUserAsync(HttpContext);

        // Create a new database context
        using var context = dbContext.CreateDbContext();
            
        if (user is null)
        {
            // If no user is logged in, display public recipes only
            recipes = await context.Recipe
                .Include(r => r.Category)
                .Where(r => r.IsPublic)
                .ToListAsync();
        }
        else 
        {
            // If a user is logged in, display public and the user's private recipes
            recipes = await context.Recipe
                .Include(r => r.Category)
                .Where(r => r.UserId == user.Id || r.IsPublic)
                .ToListAsync();
        }
    }
 
    // Method to navigate to the recipe creation page
    private void AddNewRecipe()
    {
        NavigationManager.NavigateTo("/RecipeCreate");
    }

}
