@page "/RecipeView/{id:int}"
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject IDbContextFactory<ApplicationDbContext> dbContext
@inject RecipeVault.Components.Account.IdentityUserAccessor UserAccessor
@using RecipeVault.Models
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.EntityFrameworkCore;
@using RecipeVault.Data;
@using RecipeVault.Models;


<PageTitle>{recipe_name}</PageTitle>

@if(recipe != null)
{
    <div class="container py-5">

        <h1 title="Name">@recipe.Name</h1>

        <div class="main">

            <div id=category> 
                <h2>Category</h2>
                <p>@recipe.Category.Name</p>
            </div>

            <div id=description> 
                <h2>Description</h2>
                <p>@recipe.Description</p>
            </div>

            <div class="ingredients"> 
                <h2>Ingredients</h2>
                <!--Generate list of ingredients here-->
                <ul>

                    @foreach (var ingredient in recipe.Ingredients)
                    {
                        <li>@ingredient.Quantity - @ingredient.Units : @ingredient.Name</li>
                    }
                </ul>
            </div>

            <div class="instructions">
                <h2 class=section>Instructions</h2>
                <!--Generate list of instructions here-->
                <p>
                    @recipe.Instructions
                </p>
            </div>
        </div>

        <div class="buttons-container">
            <button class="btn btn-secondary" OnClick=" location.href='/RecipeEdit/@recipe.Id' ">Edit</button>
            <button class="btn btn-danger" OnClick=" location.href='/RecipeDelete/@recipe.Id' ">Delete</button>
        </div>

    </div>

}


@code {

    // Parameter to receive the recipe ID from the URL
    [Parameter]
    public int Id { get; set; }

    // Cascading parameter to get the current HttpContext
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    // Recipe object to hold the data of the recipe being viewed
    [SupplyParameterFromForm]
    private Recipe recipe { get; set; }

    // List to hold the categories for the recipe
    private List<Category> Categories { get; set; } = new List<Category>();

    // Method that runs when the component is initialized
    protected override async Task OnInitializedAsync()
    {        
        // Create a new database context
        using var context = dbContext.CreateDbContext();
        
        // Load all categories from the database
        Categories = await context.Category.ToListAsync();
        
        // Load the recipe with the specified ID, including its category and ingredients
        recipe = await context.Recipe
            .Include(r => r.Category)
            .Include(r => r.Ingredients) 
            .FirstOrDefaultAsync(r => r.Id == this.Id);
        
        // Log the recipe name and category to the console
        Console.WriteLine("Recipe: " + recipe.Name);
        Console.WriteLine("Category: " + recipe.Category.Name);
    }

}