@page "/RecipeEdit/{id:int}"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore;
@inject IDbContextFactory<ApplicationDbContext> dbContext
@inject RecipeVault.Components.Account.IdentityRedirectManager redirectManager
@* @inject HttpClient HttpClient *@

@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> userManager
@inject NavigationManager NavigationManager
@using RecipeVault.Data;
@using RecipeVault.Models;
@using RecipeVault.Components.Account;

@attribute [Authorize(Roles = "User")]

<PageTitle>Edit Recipe</PageTitle>

@* User must own the recipe to edit *@
@if(recipe != null  && isOwner) 
{
    <div class="container py-5">

        <h1>Edit Recipe</h1>

        <div class="main">

            <EditForm Model="@recipe" >
                <DataAnnotationsValidator />

                <div class="form-top">

                    <div class="form-group">
                        <label for="FirstName">Name:</label>
                        <InputText id="FirstName" @bind-Value="recipe.Name" class="form-control" />
                        <ValidationMessage For="@(() => recipe.Name)" />
                    </div>

                    <div class="form-group">
                        <label for="LastName">Description:</label>
                        <InputText id="LastName" @bind-Value="recipe.Description" class="form-control" />
                        <ValidationMessage For="@(() => recipe.Description)" />
                    </div>
                    
                    <div class="mb-3">
                        <label for="category" class="form-label">Category</label>
                        <InputSelect id="category" class="form-select" @bind-Value="recipe.CategoryId">
                            @foreach (var category in Categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                    </div>
                    
                    <div class="form-check mb-3">
                        <InputCheckbox id="isPublic" class="form-check-input" @bind-Value="recipe.IsPublic" />
                        <label class="form-check-label" for="isPublic">Is Public?</label>
                    </div>

                    <div class="form-group">
                        <label for="Instructions">Instructions:</label>
                        <InputText id="Instructions" @bind-Value="recipe.Instructions" class="form-control" />
                        <ValidationMessage For="@(() => recipe.Instructions)" />
                    </div>

                </div>

                <div class="form-bottom">

                    <h2>Ingredients</h2>

                    @foreach (var ingredient in recipe.Ingredients)
                    {
                        <div class="ingredients">

                            <div class="removal-button">

                                <button type="button" class="btn btn-danger" @onclick="() => RemoveIngredient(ingredient)">Remove Ingredient</button>

                            </div>

                            <div class="ingredient">

                                <div class="form-group">
                                    <label for="Ingredient">Ingredient:</label>
                                    <InputText id="Ingredient" @bind-Value="ingredient.Name" class="form-control" />
                                    <ValidationMessage For="@(() => ingredient.Name)" />
                                </div>

                                <div class="form-group">
                                    <label for="Quantity">Quantity:</label>
                                    <InputText id="Quantity" @bind-Value="ingredient.Quantity" class="form-control" />
                                    <ValidationMessage For="@(() => ingredient.Quantity)" />
                                </div>

                                <div class="form-group">
                                    <label for="Units">Units:</label>
                                    <InputText id="Units" @bind-Value="ingredient.Units" class="form-control" />
                                    <ValidationMessage For="@(() => ingredient.Units)" />
                                </div>

                            </div>

                        </div>
                    }
                    
                    <div class="add-button">
                        <button type="button" class="btn btn-primary" @onclick="AddIngredients">Add Ingredients</button>
                    </div>

                </div>
                
                <div class="buttons-container">

                    <button type="button" class="btn btn-success" @onclick="save" >Save</button>

                    <button type="button" class="btn btn-secondary" @onclick="cancel">Cancel</button>

                </div>

            </EditForm>

        </div>

    </div>

}
 else 
{
    <EditError /> 
} 
@code {
    [Parameter]
    public int Id { get; set; }    
    private Recipe recipe { get; set; }
    private List<Category> Categories { get; set; } = new List<Category>();
    private List<Ingredient> IngredientsToDelete { get; set; } = new List<Ingredient>();
    private List<Ingredient> IngredientsToAdd { get; set; } = new List<Ingredient>();
    private bool isOwner = false;

    protected override async Task OnInitializedAsync()
    { 
        using var context = dbContext.CreateDbContext();
        // Load categories from the database
        Categories = await context.Category.ToListAsync();
        // Load the recipe with its category and ingredients
        recipe = await context.Recipe
            .Include(r => r.Category)
            .Include(r => r.Ingredients) 
            .FirstOrDefaultAsync(r => r.Id == this.Id);     

        // Check if the current user is the owner of the recipe
        isOwner = await isRecipeOwner();   
    }

    private void AddIngredients()
    {
        Console.WriteLine("Adding Ingredient");
        recipe.Ingredients = recipe.Ingredients ?? new List<Ingredient>();
        Ingredient newIngredient = new Ingredient();

        // Add new ingredient to the list
        IngredientsToAdd.Add(newIngredient);
        recipe.Ingredients.Add(newIngredient);
        StateHasChanged();
    }

    private void RemoveIngredient(Ingredient Ingredient)
    {
        // If the ingredient is already in the database, mark it for deletion
        if (Ingredient.IngredientId != 0)
        {
            IngredientsToDelete.Add(Ingredient);
        }
        // Remove ingredient from the recipe
        recipe.Ingredients.Remove(Ingredient);
        IngredientsToAdd.Remove(Ingredient);
        StateHasChanged();
    }

    private async void save()
    {
        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        using var context = dbContext.CreateDbContext();

        // Create a new recipe object and populate it with the form data
        Recipe recipe = new Recipe();
        recipe.Id = this.recipe.Id;
        recipe.Name = this.recipe.Name;
        recipe.Description = this.recipe.Description;
        recipe.CategoryId = this.recipe.CategoryId;
        if (recipe.CategoryId == 0)
        {
            recipe.CategoryId = Categories[0].Id;
        }
        recipe.Instructions = this.recipe.Instructions;
        recipe.IsPublic = this.recipe.IsPublic;
        recipe.UserId = userId;
        recipe.Ingredients = new List<Ingredient>();
        foreach (var ingredient in IngredientsToAdd)
        {
            recipe.Ingredients.Add(new Ingredient { Name = ingredient.Name, Quantity = ingredient.Quantity, Units = ingredient.Units });
        }
        Console.WriteLine("Category ID: " + this.recipe.CategoryId);
      
        // Update the recipe and remove any ingredients marked for deletion
        context.Recipe.Update(recipe);
        context.Ingredient.RemoveRange(IngredientsToDelete);

        // Save changes to the database
        await context.SaveChangesAsync();
        Console.WriteLine("recipe ID: " + recipe.Id);
        // Navigate to the recipe view page
        NavigationManager.NavigateTo("/RecipeView/" + @recipe.Id);  
    }

    private async void cancel()
    {
        // Navigate to the recipe view page without saving changes
        NavigationManager.NavigateTo("/RecipeView/" + this.Id);
    }

    private async Task<bool> isRecipeOwner()
    {
        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        // Check if the logged-in user is the owner of the recipe
        Console.WriteLine("Recipe Creator ID: " + this.recipe.UserId);
        Console.WriteLine("Logged In User ID: " + userId);
        return userId == recipe.UserId;
    }
}
